# import tempfile
# from dataclasses import dataclass

# import json
# import os
# import xml.etree.ElementTree as ET
# from typing import Optional

# import fsspec
# import tqdm
# from fsspec.callbacks import TqdmCallback
from markweb import markdown
import re
from markweb.markweb import convert_page
from bs4 import BeautifulSoup
import markdownify

class Ar5ivMarkdownConverter(markdown.MyMarkdownConverter):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
    
    def convert_sub(self, el, text, convert_as_inline):
        if not text:
            return ""
        return f"_{{{text}}}"

    def convert_sup(self, el, text, convert_as_inline):
        if not text:
            return ""
        return f"^{{{text}}}"

    def convert_br(self, el, text, convert_as_inline):
        if convert_as_inline:
            return "<br>"

        if self.options['newline_style'].lower() == markdownify.BACKSLASH:
            return '\\\n'
        else:
            return '  \n'


def to_markdown(html):
    if isinstance(html, str):
        html = BeautifulSoup(html, "html.parser")
    authors = html.find('div', {'class': 'ltx_authors'})
    if authors:
        authors.decompose()
    title_page = html.find('div', {'class': 'ltx_titlepage'})
    if title_page:
        title_page.decompose()
    html.find('title').decompose()
    text = Ar5ivMarkdownConverter().convert_soup(html)
    # cleanup: replace nbsp as space
    # this isn't quite right if we preserve html in places, but we currently are not doing that
    text = text.replace("\xa0", " ").strip()
    return text
import glob
import os

#for file in glob.glob('/juice4/scr4/nlp/crfm/markweb/ar5iv/error/0003/*'):
for file in ["/juice4/scr4/nlp/crfm/markweb/ar5iv/error/0003/math0003131.html"]:
    with open(file, "r") as f:
        s = f.read()
    print(f"reading {file}")
    title = re.search(r"<title>\n*\s*(.*)\s*\n*<\/title>", s).group(1)
    match = re.search(r"""<section.*class="ltx_bibliography">""", s)
    if match:
        s = s[:match.start()]
    s = to_markdown(s)
    match = re.search(r"#*\s*Abstract\s*\n", s,re.IGNORECASE)
    if match:
        s = s[match.start():]
    else:
        match = re.search(r"#*.*Introduction\n",s, re.IGNORECASE)
        if match:
            s = s[match.start():]
    match = re.search(r"#*\s*(References|Bibliography|Bibliografia|Bibliographie)\s*\n",s,re.IGNORECASE)
    if match:
        s = s[:match.start()]
    match = re.search(r"Generated on ,*by \[LaTeXML", s)
    if match:
        s = s[:match.start()]
    print(f"saving {file}")
    with open(os.path.basename(file).split(".")[0]+".md", "w") as f:
        f.write(s)
    # Get rid of abstract / introduction / generated by
    # Pull date and title from arxiv
