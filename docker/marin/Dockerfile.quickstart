# Use Ubuntu 22.04 as the base image
FROM ubuntu:22.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV CCACHE_DIR=/root/.cache/ccache
ENV CMAKE_CXX_COMPILER_LAUNCHER=ccache
ENV PIP_EXTRA_INDEX_URL="https://download.pytorch.org/whl/cpu"

# Install system dependencies
RUN apt-get update -y && \
    apt-get install -y curl ccache git wget vim numactl gcc-12 g++-12 python3 python3-pip \
    libnuma-dev ffmpeg libsm6 libxext6 libgl1 && \
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 10 --slave /usr/bin/g++ g++ /usr/bin/g++-12 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Upgrade pip and install Python packages
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir cmake ninja

# Set up the workspace
WORKDIR /workspace

# Clone and install levanter
RUN git clone https://github.com/stanford-crfm/levanter.git && \
    cd levanter && \
    pip install --no-cache-dir .[test] && \
    cd ..

# Clone and build vLLM
ARG VLLM_CPU_DISABLE_AVX512=false
ENV VLLM_CPU_DISABLE_AVX512=${VLLM_CPU_DISABLE_AVX512}
ENV VLLM_TARGET_DEVICE=cpu

RUN git clone https://github.com/vllm-project/vllm.git && \
    cd vllm && \
    pip uninstall torch torchvision -y && \
    pip install torch==2.4.0+cpu torchvision==2.4.0+cpu -f https://download.pytorch.org/whl/torch_stable.html && \
    pip install wheel packaging ninja "setuptools>=49.4.0" numpy setuptools_scm && \
    sed -i '/torch == /d' requirements-cpu.txt && \
    sed -i '/torchvision/d' requirements-cpu.txt && \
    pip install -v -r requirements-cpu.txt && \
    if [ "$VLLM_CPU_DISABLE_AVX512" = "true" ]; then \
        echo "Disabling AVX512 support"; \
        VLLM_CPU_DISABLE_AVX512=true python3 setup.py bdist_wheel; \
    else \
        echo "Using default AVX settings"; \
        python3 setup.py bdist_wheel; \
    fi && \
    pip install --no-cache-dir dist/*.whl && \
    cd ..

# Clone and install HELM with local_vllm branch
RUN git clone -b local_vllm https://github.com/stanford-crfm/helm.git && \
    cd helm && \
    pip install --no-cache-dir . && \
    cd ..

# Install additional dependencies for HELM
RUN pip install --no-cache-dir transformers tokenizers

# Set up experiment directory
COPY experiments /workspace/experiments

# Default command
CMD ["bash"]
